#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdbool.h>
#include <pthread.h>

struct Threadinfo
{
    char **board;
    int turn;
    int moves;
    int stop;
}Threadinfo;

void printBoard(char**);
int gameOver(char**);
void* player1(void*);
void* player2(void*);

int main(int argc, char** argv)
{
    struct Threadinfo info;
    info.board = (char**) malloc( 3 * sizeof(char*));
  
    for(int i = 0; i < 3; i++)
    {
    	info.board[i] = (char*) malloc( 3 * sizeof(char));	
    }

    for(int i = 0; i < 3; i++)
    {
    	for (int j = 0; j < 3; j++)
	{
        	info.board[i][j] = ' ';
        }
    }
    
    info.turn = 1;
    info.moves = 0;
    info.stop = 0;

    printBoard(info.board);

    pthread_t id1;
    pthread_t id2;

    int err = pthread_create(&id1, NULL, player1, &info);

    if (err != 0){
        printf("Error creating pthread\n");
    }

    err = pthread_create(&id2, NULL, player2, &info);

    if (err != 0){
        printf("Error creating pthread\n");
    }

   (void) pthread_join(id1, NULL);
   (void) pthread_join(id2, NULL);
   return 0;
}

void* player1(void* arg)
{
        struct Threadinfo* info = (struct Threadinfo*) arg;
	
	while(!info->stop)
	{
		if(info->turn == 1)
		{
			while(1)
			{
				int row = rand() % 3;
				int col = rand() % 3;
				if (info->board[row][col] == ' ')
				{
					info->board[row][col] = 'X';
       					info->moves++;
					info->turn = 2;
					printBoard(info->board);
					break;
				}
			}
			
			if(gameOver(info->board) == 1)
			{
				printf("Player 1 wins\n");
				info->stop = 1;
				info->turn = 2;
				break;
			}

			else if(gameOver(info->board) == 0 && info->moves == 9)
			{
				printf("Draw\n");
				info->stop = 1;
				info->turn = 2;
				break;
			}

		}
	}
	
}

void* player2(void* arg)
{
        struct Threadinfo* info = (struct Threadinfo*) arg;
	
	while(!info->stop)
	{
		if(info->turn == 2)
		{
			while(1)
			{
				int row = rand() % 3;
				int col = rand() % 3;
				if (info->board[row][col] == ' ')
				{
					info->board[row][col] = 'O';
       					info->moves++;
					info->turn = 1;
					printBoard(info->board);
					break;
				}
			}

			if(gameOver(info->board) == 2)
			{
				printf("Player 2 wins\n");
				info->stop = 1;
				info->turn = 1;
				break;
			}

			
			else if(gameOver(info->board) == 0 && info->moves == 9)
			{
				printf("Draw\n");
				info->stop = 1;
				info->turn = 1;
				break;
			}
		}
	}
	
}

void printBoard(char** board)
{
	printf("-----------\n");
	
	for(int i = 0; i < 3; i++)
    	{
        	printf("|");
    		for (int j = 0; j < 3; j++)
		{
			
        		printf("%c", board[i][j]);
  			printf(" |");
        	}
		
		printf("\n");
		printf("-----------\n");
    	}

	printf("\n\n");
	
}

int gameOver(char** board)
{
	if(board[0][0] == 'X' && board[0][1] == 'X' && board[0][2] == 'X')
		return 1;

	else if(board[1][0] == 'X' && board[1][1] == 'X' && board[1][2] == 'X')
		return 1;

	else if(board[2][0] == 'X' && board[2][1] == 'X' && board[2][2] == 'X')
		return 1;

	else if(board[0][0] == 'X' && board[1][1] == 'X' && board[2][2] == 'X')
		return 1;

	else if(board[0][2] == 'X' && board[1][1] == 'X' && board[2][0] == 'X')
		return 1;

	else if(board[0][0] == 'X' && board[1][0] == 'X' && board[2][0] == 'X')
		return 1;

	else if(board[0][1] == 'X' && board[1][1] == 'X' && board[2][1] == 'X')
		return 1;

	else if(board[0][2] == 'X' && board[1][2] == 'X' && board[2][2] == 'X')
		return 1;

	else if(board[0][0] == 'O' && board[0][1] == 'O' && board[0][2] == 'O')
		return 2;

	else if(board[1][0] == 'O' && board[1][1] == 'O' && board[1][2] == 'O')
		return 2;

	else if(board[2][0] == 'O' && board[2][1] == 'O' && board[2][2] == 'O')
		return 2;

	else if(board[0][0] == 'O' && board[1][1] == 'O' && board[2][2] == 'O')
		return 2;

	else if(board[0][2] == 'O' && board[1][1] == 'O' && board[2][0] == 'O')
		return 2;

	else if(board[0][0] == 'O' && board[1][0] == 'O' && board[2][0] == 'O')
		return 2;

	else if(board[0][1] == 'O' && board[1][1] == 'O' && board[2][1] == 'O')
		return 2;

	else if(board[0][2] == 'O' && board[1][2] == 'O' && board[2][2] == 'O')
		return 2;

	else
		return 0;
}
